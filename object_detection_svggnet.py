# -*- coding: utf-8 -*-
"""object-detection-svggnet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1waFV6-Kj23t03ytbR7id7RtkV9bsB0Cx
"""

from google.colab import drive
drive.mount('/content/drive')

!cd /content/drive/My Drive/object-detection-nn

!python3 "/content/drive/My Drive/object-detection-nn/train_vgg.py" -d "/content/drive/My Drive/object-detection-nn/animals" -m "/content/drive/My Drive/object-detection-nn/output1/vgg.model" -l "/content/drive/My Drive/object-detection-nn/output1/vgg.pickle" -p "/content/drive/My Drive/object-detection-nn/output1/plot.png"

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

from keras.models import load_model
import argparse
import pickle
import cv2

args={'image': '/content/drive/My Drive/object-detection-nn/images/dog.jpg', 'model': '/content/drive/My Drive/object-detection-nn/output1/vgg.model', 'label_bin': '/content/drive/My Drive/object-detection-nn/output1/vgg.pickle', 'width': 64, 'height': 64, 'flatten':-1}

# load the input image and resize it to the target spatial dimensions
image = cv2.imread(args["image"])
output = image.copy()
image = cv2.resize(image, (args["width"], args["height"]))

# scale the pixel values to [0, 1]
image = image.astype("float") / 255.0

# check to see if we should flatten the image and add a batch
# dimension
print(image.shape)
if args["flatten"] > 0:
	image = image.flatten()
	image = image.reshape((1, image.shape[0]))

# otherwise, we must be working with a CNN -- don't flatten the
# image, simply add the batch dimension
else:
	image = image.reshape((1, image.shape[0], image.shape[1],
		image.shape[2]))
print(image.shape)

# load the model and label binarizer
print("[INFO] loading network and label binarizer...")
model = load_model(args["model"])
lb = pickle.loads(open(args["label_bin"], "rb").read())

# make a prediction on the image
preds = model.predict(image)
print(preds)

# find the class label index with the largest corresponding
# probability
i = preds.argmax(axis=1)[0]
print(i)
label = lb.classes_[i]
print(label)

# draw the class label + probability on the output image
text = "{}: {:.2f}%".format(label, preds[0][i] * 100)
cv2.putText(output, text, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7,
	(0, 0, 255), 2)

# show the output image
from google.colab.patches import cv2_imshow
cv2_imshow(output)
cv2.waitKey(0)

